---
- name: Install MongoDB Enterprise Advanced 7.0 Replica Set on Ubuntu 22.04 with Authentication (arm)
  hosts: mongodb_servers
  become: yes
  vars:
    mongodb_version: "7.0"
    mongodb_repo_url: "https://repo.mongodb.com/apt/ubuntu"
    replica_set_name: "rs0"
    data_directory: "/data/mongodb"
    log_directory: "/var/log/mongodb"
    keyfile_path: "/etc/mongodb-keyfile"
    admin_username: "mongoAdmin"
    admin_password: "Password123"

  pre_tasks:
    - name: Get the IP address of the host
      set_fact:
        mongodb_ip: "{{ ansible_default_ipv4.address }}"

  tasks:
    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present
        update_cache: yes

    - name: Install pymongo
      pip:
        name: pymongo
        state: present

    - name: Install gnupg and curl
      apt:
        name:
          - gnupg
          - curl
        state: present
        update_cache: yes

    - name: Add MongoDB GPG key
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-7.0.asc
        state: present

    # Or arch=amd64
    - name: Add MongoDB repository
      apt_repository:
        repo: "deb [ arch=arm64 ] {{ mongodb_repo_url }} jammy/mongodb-enterprise/{{ mongodb_version }} multiverse"
        state: present
        filename: mongodb-enterprise

    - name: Install MongoDB Enterprise packages
      apt:
        name:
          - mongodb-enterprise={{ mongodb_version }}*
          - mongodb-enterprise-server={{ mongodb_version }}*
          - mongodb-enterprise-shell={{ mongodb_version }}*
          - mongodb-enterprise-mongos={{ mongodb_version }}*
          - mongodb-enterprise-tools={{ mongodb_version }}*
        state: present
        update_cache: yes

    - name: Ensure /data directory exists
      file:
        path: /data
        state: directory
        mode: '0755'

    - name: Create MongoDB data directory
      file:
        path: "{{ data_directory }}"
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0755'

    - name: Create log directory
      file:
        path: "{{ log_directory }}"
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0755'

    - name: Check if keyfile exists
      stat:
        path: "{{ keyfile_path }}"
      register: keyfile_stat

    - name: Generate MongoDB keyfile content
      command: openssl rand -base64 756
      register: keyfile_content
      when: not keyfile_stat.stat.exists
      run_once: true
      delegate_to: "{{ groups['mongodb_servers'][0] }}"

    - name: Create keyfile on all hosts
      copy:
        content: "{{ hostvars[groups['mongodb_servers'][0]]['keyfile_content']['stdout'] }}"
        dest: "{{ keyfile_path }}"
        mode: '0400'
        owner: mongodb
        group: mongodb
      when: not keyfile_stat.stat.exists

    - name: Configure MongoDB without authentication
      template:
        src: mongod_no_auth.conf.j2
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart MongoDB

    - name: Ensure MongoDB is started
      systemd:
        name: mongod
        state: started
        enabled: yes

    - name: Wait for MongoDB to start
      wait_for:
        port: 27017
        delay: 10
        timeout: 60

    - name: Initialize replica set
      community.mongodb.mongodb_replicaset:
        login_host: localhost
        login_port: 27017
        replica_set: "{{ replica_set_name }}"
        members: "{{ groups['mongodb_servers'] | map('extract', hostvars, ['mongodb_ip']) | map('regex_replace', '^(.*)$', '\\1:27017') | list }}"
      register: rs_init
      when: inventory_hostname == groups['mongodb_servers'][0]
      run_once: true
      ignore_errors: yes

    - name: Wait for replica set to stabilize
      pause:
        seconds: 30
      when: rs_init is changed

    - name: Determine replica set status
      community.mongodb.mongodb_status:
        login_host: localhost
        login_port: 27017
        replica_set: "{{ replica_set_name }}"
      register: rs_status
      ignore_errors: yes

    - name: Set primary node fact
      set_fact:
        primary_node: >-
          {{
            (rs_status.replicaset | default({})
            | dict2items
            | selectattr('value', 'equalto', 'PRIMARY')
            | map(attribute='key')
            | list
            | first
            | regex_replace(':.*$', ''))
            if (rs_status.replicaset | default({}))
            else groups['mongodb_servers'][0]
          }}

    - name: Display primary node
      debug:
        var: primary_node

    - name: Check if admin user exists
      community.mongodb.mongodb_user:
        login_host: localhost
        login_port: 27017
        database: admin
        name: "{{ admin_username }}"
        state: present
      check_mode: yes
      register: admin_user_check
      ignore_errors: yes
      when: inventory_hostname == primary_node

    - name: Create admin user
      community.mongodb.mongodb_user:
        login_host: localhost
        login_port: 27017
        database: admin
        name: "{{ admin_username }}"
        password: "{{ admin_password }}"
        roles:
          - role: root
            db: admin
        state: present
      when:
        - inventory_hostname == primary_node
        - admin_user_check is failed or admin_user_check.changed
      ignore_errors: yes

    - name: Configure MongoDB with authentication
      template:
        src: mongod_auth.conf.j2
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart MongoDB

    - meta: flush_handlers

    - name: Ensure MongoDB is started and enabled
      systemd:
        name: mongod
        state: started
        enabled: yes

    - name: Wait for MongoDB to be responsive
      wait_for:
        port: 27017
        delay: 10
        timeout: 60

  handlers:
    - name: Restart MongoDB
      systemd:
        name: mongod
        state: restarted

- name: Verify replica set status
  hosts: "{{ groups['mongodb_servers'][0] }}"
  vars:
    admin_username: "mongoAdmin"
    admin_password: "Password123" # Make sure this matches the password set earlier
  tasks:
    - name: Get replica set status
      community.mongodb.mongodb_status:
        login_host: localhost
        login_port: 27017
        login_user: "{{ admin_username }}"
        login_password: "{{ admin_password }}"
        login_database: admin
        # replica_set: "{{ replica_set_name }}"
      register: rs_status

    - name: Display replica set status
      debug:
        var: rs_status

    - name: Display replica set members
      debug:
        var: rs_status.replicaset

    - name: Check if replica set is healthy
      assert:
        that:
          - rs_status.replicaset is defined
          - rs_status.replicaset | dict2items | selectattr('value', 'equalto', 'PRIMARY') | list | length == 1
          - rs_status.replicaset | dict2items | selectattr('value', 'equalto', 'SECONDARY') | list | length >= 1
        fail_msg: "Replica set is not in a healthy state"
        success_msg: "Replica set is healthy with one PRIMARY and at least one SECONDARY"